// Code generated by MockGen. DO NOT EDIT.
// Source: internal/configuration/database/sqlc/querier.go

// Package mock_sqlc_repository is a generated GoMock package.
package mock_sqlc_repository

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/expoure/pismo/transaction/internal/configuration/database/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// ListTransactions mocks base method.
func (m *MockQuerier) ListTransactions(ctx context.Context, accountID uuid.UUID) ([]sqlc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, accountID)
	ret0, _ := ret[0].([]sqlc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockQuerierMockRecorder) ListTransactions(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockQuerier)(nil).ListTransactions), ctx, accountID)
}
