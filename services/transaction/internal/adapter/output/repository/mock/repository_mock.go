// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/port/output/transaction_port.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/expoure/pismo/transaction/internal/application/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(transactionDomain domain.TransactionDomain) (*domain.TransactionDomain, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transactionDomain)
	ret0, _ := ret[0].(*domain.TransactionDomain)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(transactionDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), transactionDomain)
}

// ListTransactionsByAccountID mocks base method.
func (m *MockTransactionRepository) ListTransactionsByAccountID(accoountId uuid.UUID) (*[]domain.TransactionDomain, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByAccountID", accoountId)
	ret0, _ := ret[0].(*[]domain.TransactionDomain)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// ListTransactionsByAccountID indicates an expected call of ListTransactionsByAccountID.
func (mr *MockTransactionRepositoryMockRecorder) ListTransactionsByAccountID(accoountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByAccountID", reflect.TypeOf((*MockTransactionRepository)(nil).ListTransactionsByAccountID), accoountId)
}

// MockTransactionProducer is a mock of TransactionProducer interface.
type MockTransactionProducer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProducerMockRecorder
}

// MockTransactionProducerMockRecorder is the mock recorder for MockTransactionProducer.
type MockTransactionProducerMockRecorder struct {
	mock *MockTransactionProducer
}

// NewMockTransactionProducer creates a new mock instance.
func NewMockTransactionProducer(ctrl *gomock.Controller) *MockTransactionProducer {
	mock := &MockTransactionProducer{ctrl: ctrl}
	mock.recorder = &MockTransactionProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProducer) EXPECT() *MockTransactionProducerMockRecorder {
	return m.recorder
}

// TransactionCreated mocks base method.
func (m *MockTransactionProducer) TransactionCreated(transactionDomain domain.TransactionDomain) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TransactionCreated", transactionDomain)
}

// TransactionCreated indicates an expected call of TransactionCreated.
func (mr *MockTransactionProducerMockRecorder) TransactionCreated(transactionDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionCreated", reflect.TypeOf((*MockTransactionProducer)(nil).TransactionCreated), transactionDomain)
}
